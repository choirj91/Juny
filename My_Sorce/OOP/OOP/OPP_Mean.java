package OOP;									//부품에 해당하는 객체들을 먼저 만들고, 이것들을 하나씩 조립해서 완성된 프로그램을 만드는 기법
												//을 객체지향 프로그래밍이라고 함.
public class OPP_Mean {							//객체란 물리적으로 존재하거나 추상적인 것 중, 자신의 속성을 가지고 있고 다른것과 식별이 가능한 것을 말함.
	public static void main(String[] args) {	//속성과 동작으로 구성되어 있음. 속성을 필드(field) 동작을 메소드(Method)라고 함.
		
		// 리턴값 = 객체.메소드(매개값, 매개값2)        //객체에 도트(.) 연산자는 객체의 필드와 메소드에 접근할 때 사용.
		//int result = Calculator.add(10,20);
											    //객체는 개별적으로 사용될 수 있지만, 대부분 다른 객체와 관계를 맺음.
												//집합 관계, 사용 관계, 상속 관계 가 있음.
												//사용 관계는 다른 객체의 메소드를 호출하여 원하는 결과를 얻어냄.
												//상속 관계는 상위 객체를 기반으로 하위 객체를 생성하는 관계를 말함.
												
												//캡슐화(Encapsulation) - 객체의 필드, 메소드를 하나로 묶고, 실제 구현 내용을 감추는 것.
												//접근 제한자(Access Modifier)을 사용.  
												//상속(Inheritance) - 상위 객체를 재사용해서 하위 객체를 쉽고 빨리 설계할 수 있도록 도와줌.
												//다형성(Polymorphism) - 같은 타입이지만 실행 결과가 다양한 객체를 이용할 수 있는 성질.
		
	}
}
