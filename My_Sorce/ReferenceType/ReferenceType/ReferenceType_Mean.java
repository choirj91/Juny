package ReferenceType;

public class ReferenceType_Mean {          		//자바의 데이터 타입은 기본타입(Primitiva Type), 참조타입(reference Type)이 있음.
	public static void main(String[] args) {			//primitive 타입은 정수, 실수, 문자, 논리를 저장하는 타입
															//reference 타입은 객체(Object)의 번지를 참조하는 타입으로, 배열, 열거, 클래스, 인터페이스 타입.
//=====================================메모리 사용 영역
															//java.exe로 JVM이 시작되면 할당받은 메모리 영역을 세부 영역으로 구분해서 사용.
															//메소드(Method)영역 - 코드에서 사용되는 클래스(~.class)들을 클래스 로더로 읽어 클래스별로
															//						   - 런타임 상수풀, 필드 데이터, 메소드 데이터, 메소드 코드, 생성자 코드 등을 분류해서 저장.
															//						   - 모든 쓰레드가 공유하는 영역
															//힙(Heap)영역 - 객체와 배열이 생성되는 영역, 생성된 객체와 배열은 JVM 스택 영역의 변수나 다른 객체의 
															//				   - 필드에서 참조. 참조하는 변수나 필드가 없다면 쓰레기 취급하고 GC(Garbage Collector)를 실행
															//				   - 하여 쓰레기 객체를 힙 영역에서 자동으로 제거. 
															//JVM 스택(Stack)영역 - 각 스레드마다 하나씩 존재하며 스레드가 시작될 때 할당. 자바 프로그램에서 추가로
															// 					       - 스레드를 생성하지 않았다면 main 스레드만 존재하므로 스택도 하나.
															//					 	   - JVM 스택은 메소드를 호출할 때마다 프레임을 추가(PUSH)하고 메소드가 종료되면 
															//          			   - 해당 프레임을 제거(POP)하는 동작을 수행. 
															//						   - 프레임 내부에는 로컬 변수 스택이 있는데, 기본 타입 변수와 참조 타입 변수가 추가 및
															//						   - 제거된다. 변수가 생성되는 시점은 초기화될때이며 블록 안에서만 스택에 존재.

		
		int age =25;										//Stact 영역의 age안에 25데이터를 갖음.
		String name = "최낙준";						//heap 영역의 객체가 생성됨. (ex 생성된 객체가 100번지)
															//stact 영역의 name 안에 주소값을 갖음.(ex name 안에 100번지 주소값)
		
	}

}
